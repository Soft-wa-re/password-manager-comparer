// Copyright from the original work from which this is derived:
//
// Copyright (c) 2018-2019 Quantopian Inc.
//
// Quantopian grants you the right to reuse this code in any private or public
// context, in modified or unmodified form, as long as this copyright notice is
// left intact and the table generated by this code (or your modified version
// of it) is preceded or followed by a visible credit to "Jonathan Kamens of
// Quantopian Inc." which links to
// https://medium.com/@QuantopianCyber/head-to-head-evaluation-of-five-password-managers-8faa4851c767 .
//
// If you add any additional features and/or products to the comparison grid or
// correct any errors or omissions, you are encouraged to submit your
// improvements back to security@quantopian.com so we can incorporate them into
// the original, published version of the grid for the benefit of other readers.
//
// Copyright for this derivative work:
//
// Copyright (c) 2019 Jonathan Kamens
//
// You can do whatever you want with this code provided that you leave this
// entire copyright block intact, credit me, and link back to
// https://blog.kamens.us/?p=5729.

import { React, ReactDOM, html } from './deps.js';
import { rawData, notes } from './data.js';

const dataTags = [];
for (let i = 1; i < rawData.length; i++) {
  const tags = rawData[i][1];
  for (let j = 0; j < tags.length; j++) { if (!dataTags.includes(tags[j])) dataTags.push(tags[j]); }
  dataTags.sort();
}

function yesNoCompare(n1, v1, n2, v2) {
  if (v1 == v2) return 'tie';
  if (v1 == 'yes') return n1;
  if (v2 == 'yes') return n2;
  if (v1 == 'no') return n2;
  if (v2 == 'no') return n1;
  return 'tie';
}

function getValue(v) {
  if (Array.isArray(v)) { return v[0]; }
  return v;
}

function formatValue(v) {
  v = getValue(v);
  if (v + 0 == v) return v;
  if (v == 'yes') return `<span style='color: #0D8050'>${v}</span>`;
  if (v == 'no') return `<span style='color: #C23030'>${v}</span>`;
  return `<span style='color: #BF7326;'>${v}</span>`;
}

function formatNotes(v, current, mappings) {
  if (!Array.isArray(v)) { return ''; }
  const foundNotes = [];
  for (let i = 1; i < v.length; i++) {
    if (!mappings[v[i]]) {
      mappings[v[i]] = current[0];
      current[0]++;
    }
    foundNotes.push(`<sup>${mappings[v[i]]}</sup>`);
  }
  return foundNotes.join(',');
}

function formatTable() {
  let compare1; let
    compare2;
  const currentNote = [1];
  const noteMappings = {};

  try {
    window.compare1 = document.getElementById('compare1').value;
    window.compare2 = document.getElementById('compare2').value;
  } catch {
    // First time page is loaded.
  }
  window.products = rawData[0][2];
  let comparing; let index1; let index2; let score1; let
    score2;
  if (window.compare1 && window.compare2) {
    comparing = true;
    score1 = score2 = 0;
    for (var i = 0; i < window.products.length; i++) {
      if (window.products[i] == window.compare1) index1 = i;
      if (window.products[i] == window.compare2) index2 = i;
    }
  }

  let featureList = `
    <h1>Password Manager Comparison</h1>
    <a href='./contributors.html'>contributors</a>
    <p class='features'>
    <b>Toggle features you care about:</b>`;

  const wantFeatures = [];
  let x; let
    scores = '';
  for (var i = 0; i < dataTags.length; i++) {
    const feature = dataTags[i];
    if (feature == 'OR') continue;
    const id = `feature${feature}`;
    var checked;
    try {
      checked = document.getElementById(id).checked;
    } catch {
      checked = true;
    }
    if (checked) wantFeatures.push(feature);
    featureList += " <span style='white-space: nowrap;'>"
      + `<input  class='form-check-input' type='checkbox' id='${id}'`;
    if (checked) featureList += ' checked';
    featureList += ` onchange='changeTable()'><label class="form-check-label" for='${id}'>${feature}</label></span>\n`;
  }
  featureList += '</p>';

  let t = "<div class='table-wrapper'><table>\n";

  let header = `<tr>
    <th>${rawData[0][0]}</th>
    ${window.products.reduce((p) => `<th>${p}</th>`, '')}`;
  header += comparing ? `<th>${window.compare1} vs. ${window.compare2}</th>\n` : '';
  header += '</tr>\n';
  for (var i = 1; i < rawData.length; i++) {
    if (i % 20 == 1) { x += header; }
    let tags = rawData[i][1];
    if (tags.length) {
      var found;
      if (tags[0] == 'OR') {
        tags = tags.slice(1);
        found = false;
        for (var j = 0; j < wantFeatures.length; j++) {
          if (tags.includes(wantFeatures[j])) {
            found = true;
            break;
          }
        }
      } else {
        found = true;
        for (var j = 0; j < tags.length; j++) {
          if (!wantFeatures.includes(tags[j])) {
            found = false;
            break;
          }
        }
      }
      if (!found) continue;
    }
    x += `<tr><td>${rawData[i][0]}</td>`;
    const values = rawData[i][2];
    for (var j = 0; j < values.length; j++) {
      x += `<td>${formatValue(values[j])
      }${formatNotes(values[j], currentNote, noteMappings)}</td>`;
    }
    if (comparing) {
      var cmp;
      if (!(cmp = rawData[i][3])) { cmp = yesNoCompare; }
      const winner = cmp(
        window.compare1,
        getValue(values[index1]),
        window.compare2,
        getValue(values[index2]),
      );
      if (winner == window.compare1) score1++;
      else if (winner == window.compare2) score2++;
      x += `<td>${winner}</td>`;
    }
    x += '</tr>\n';
  }

  if (comparing) {
    scores += `
        <tr><th align=left colspan='${1 + products.length}'>Score:</th>
        <th align=left>
            ${window.compare1} - ${score1}<br/>
            ${window.compare2} - ${score2}</th></tr>`;
  }

  t += scores;
  t += x;

  t += '</table></div>\n';
  t += '<form>\n';
  t += featureList;
  window.makeDropdown = function (id, c1, c2) {
    let dd = '';
    for (let i = 0; i < window.products.length; i++) {
      if (window.products[i] == c1) {
      } else {
        dd += `<option value='${window.products[i]}'
                    ${window.products[i] == c2 ? ' selected' : ''}
                  > ${window.products[i]} </option>}`;
      }
    }
    return `
        <select class='d-inline-block w-auto form-select' aria-label='Default select example'  id='compare${id}' onchange='changeTable()'>
          <option value>(select)</option>
          ${dd}
        </select>
        `;
  };
  t += "<p class='compare'><b>Add a comparison:</b> Compare ";
  t += window.makeDropdown(1, window.compare2, window.compare1);
  t += ' to ';
  t += window.makeDropdown(2, window.compare1, window.compare2);
  t += '</p>\n';
  t += '</form>\n';
  t += "<div class='notes'>\n";
  if (currentNote[0] > 1) {
    t += '<hr/>\n';
    const reverseMappings = [];
    for (let key = 'a'; noteMappings[key];
      key = String.fromCharCode(key.charCodeAt(0) + 1)) { reverseMappings[noteMappings[key]] = key; }
    for (var i = 1; i < currentNote[0]; i++) {
      t += `<p><sup>${i}</sup>${notes[reverseMappings[i]]
      }</p>\n`;
    }
  }
  t += '</div>\n';
  return t;
}

window.changeTable = function () {
  const App = (props) => ({ __html: formatTable() });

  ReactDOM.render(
    html`<body dangerouslySetInnerHTML=${App()} />`,
    document.body,
  );
};

window.onLoad = function () {
  changeTable();
};

// Local variables:
// js-indent-level: 2
// End:
